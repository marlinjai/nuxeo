image:
  repository: {{ requiredEnv "NUXEO_DOCKER_IMAGE" | quote }}
  pullPolicy: Always
architecture: "api-worker"
replicaCount: {{ env "NX_REPLICA_COUNT" | default 1 }}
workerCount: {{ env "NX_WORKER_COUNT" | default 1 }}
resources:
  requests:
    cpu: "12"
    memory: "48Gi"
  limits:
    cpu: "12"
    memory: "48Gi"
podLabels:
  dev.nuxeo.com/usage: benchmark
podAnnotations:
  ad.datadoghq.com/nuxeo.logs: '[{"service":"{{ env "SERVICE_TAG" | default "benchmark-local" }}"}]'
  ad.datadoghq.com/tags: '{"service":"{{ env "SERVICE_TAG" | default "benchmark-local" }}"}'
service:
  labels:
    dev.nuxeo.com/usage: benchmark
amazonS3:
  enabled: true
  accessKeyId: {{ requiredEnv "AWS_ACCESS_KEY_ID" }}
  secretAccessKey: {{ requiredEnv "AWS_SECRET_ACCESS_KEY" }}
  region: us-east-1
  bucket: nuxeo-platform-benchmark
  ## The bucket prefix needs to end with /
  bucketPrefix: {{ env "BUCKET_PREFIX" | default "benchmark-tests/" }}
customEnvs:
- name: NUXEO_CLID
  valueFrom:
    secretKeyRef:
      name: instance-clid
      key: instance.clid
- name: DD_AGENT_HOST
  valueFrom:
    fieldRef:
      fieldPath: status.hostIP
customProperties:
  benchmark: |
    launcher.log4j2.file=/etc/nuxeo/log4j2-launcher.xml
    nuxeo.append.templates.benchmark=docker-json,perf,tomcat-logs
    nuxeo.docker-json.log4j.layout.attributes=compact="true" eventEol="true" properties="true" stacktraceAsString="true"
    nuxeo.core.binarymanager=org.nuxeo.ecm.blob.s3.S3BlobProvider
    nuxeo.db.transactiontimeout=3600
    JAVA_OPTS=$JAVA_OPTS -XX:SoftRefLRUPolicyMSPerMB=0
    JAVA_OPTS=$JAVA_OPTS -XX:-OmitStackTraceInFastThrow
  metrics: |
    metrics.enabled=true
    metrics.datadog.enabled=true
    metrics.datadog.pollInterval=60
    metrics.datadog.tags=branch:{{ env "BRANCH_NAME" | default "local" }},pod_name:${env:POD_NAME},project:jenkins-{{ env "CURRENT_NAMESPACE" | default "local" }},repository=nuxeo-lts,source:nuxeo,service:benchmark-{{ env "BUILD_NUMBER" | default "local" }},team:platform,usage:benchmark
    metrics.datadog.udp=true
    metrics.datadog.host=${env:DD_AGENT_HOST}
    metrics.datadog.port=8125
{{- if eq (env "INSTALL_NEEDED_PACKAGES") "true" }}
packages: amazon-s3-online-storage nuxeo-platform-importer nuxeo-web-ui
{{- end }}
extraVolumeMounts:
- name: log4j2-launcher
  mountPath: /etc/nuxeo/log4j2-launcher.xml
  subPath: log4j2-launcher.xml
extraVolumes:
- name: log4j2-launcher
  secret:
    secretName: nuxeo-log4j2-launcher
extraStringSecrets:
  nuxeo-log4j2-launcher:
    log4j2-launcher.xml: |-
      <?xml version="1.0" encoding="UTF-8"?>
        <!-- Log4j Configuration for launcher -->
      <Configuration monitorInterval="30" shutdownHook="disable">
        <Appenders>
          <!-- ============================== -->
          <!-- Append messages to the console -->
          <!-- ============================== -->
          <Console name="ConsoleJSONAppender-ORIGINAL" target="SYSTEM_OUT">
            <JsonLayout compact="true" eventEol="true" properties="true" stacktraceAsString="true"/>
          </Console>
  
          <Rewrite name="ConsoleJSONAppender">
            <AppenderRef ref="ConsoleJSONAppender-ORIGINAL"/>
            <MaskSensitiveData />
          </Rewrite>
        </Appenders>
        <Loggers>
          <Logger name="org.nuxeo" level="warn" />
          <Logger name="org.nuxeo.launcher" level="info" />
          <Logger name="org.nuxeo.connect" level="info" />
          <Logger name="org.nuxeo.ecm.admin" level="info" />
          <Logger name="org.nuxeo.runtime.deployment.preprocessor" level="info" />
          <Logger name="org.eclipse.equinox.p2.cudf" level="warn" />
          <!-- NXP-11424/NXBT-550 Relocated package in nuxeo-connect-client -->
          <Logger name="hidden.org.eclipse.equinox.p2.cudf" level="warn" />
          <!-- Hide warning from HttpMethodBase: << Going to buffer response body of large
          or unknown size. Using getResponseBodyAsStream instead is recommended. >> -->
          <Logger name="org.apache.commons.httpclient.HttpMethodBase" level="error" />
          <Logger name="org.apache.commons.vfs2.impl.StandardFileSystemManager" level="warn" />
          <Root level="warn">
            <AppenderRef ref="ConsoleJSONAppender" />
          </Root>
        </Loggers>
      </Configuration>

affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: dev.nuxeo.com/app
          operator: In
          values:
          - nuxeo
          - opensearch
          - mongodb
      topologyKey: "kubernetes.io/hostname"
  podAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: dev.nuxeo.com/app
          operator: In
          values:
          - kafka
      topologyKey: "kubernetes.io/hostname"
ingress:
  annotations:
    # set a timeout of 4 hours as we have a long running import
    nginx.ingress.kubernetes.io/proxy-read-timeout: "14400"
{{ readFile "values-tolerations-nodeselector.yaml" }}
