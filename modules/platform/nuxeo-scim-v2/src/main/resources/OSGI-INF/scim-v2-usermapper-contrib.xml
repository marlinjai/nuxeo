<?xml version="1.0"?>
<component name="org.nuxeo.scim.v2.usermapper.contrib">

  <extension target="org.nuxeo.usermapper.service.UserMapperComponent"
    point="mapper">

    <mapper name="scimV2" type="groovy">
      <mapperScript>
          <![CDATA[
          import static org.apache.commons.lang3.StringUtils.isBlank;

          import java.util.List;

          import org.nuxeo.ecm.platform.usermanager.UserManager;
          import org.nuxeo.runtime.api.Framework;

          import com.unboundid.scim2.common.types.Email;

          // POST update
          UserManager um = Framework.getService(UserManager.class);
          if (!searchAttributes.containsKey(um.getUserIdField())) {
              String userId = userObject.getUserName();
              searchAttributes.put(um.getUserIdField(), userId);
          }

          String displayName = userObject.getDisplayName();
          // don't nullify if not provided, need an explicit empty string for this
          if (displayName != null) {
              if (isBlank(displayName)) {
                  userAttributes.put("firstName", null);
                  userAttributes.put("lastName", null);
              } else {
                  displayName = displayName.trim();
                  int idx = displayName.indexOf(" ");
                  if (idx > 0) {
                      userAttributes.put("firstName", displayName.substring(0, idx).trim());
                      userAttributes.put("lastName", displayName.substring(idx + 1).trim());
                  } else {
                      userAttributes.put("firstName", displayName.trim());
                      userAttributes.put("lastName", null);
                  }
              }
          }

          List<Email> emails = userObject.getEmails();
          // don't nullify if not provided, need an explicit empty list for this
          if (emails != null) {
              if (emails.isEmpty()) {
                  userAttributes.put("email", null);
              } else {
                  Email email = emails.get(0);
                  if (email == null) {
                      userAttributes.put("email", null);
                  } else {
                      userAttributes.put("email", email.getValue());
                  }
              }
          }
        ]]>
      </mapperScript>

      <wrapperScript>
        <![CDATA[
        import static org.apache.commons.lang3.StringUtils.isNotBlank;

        import java.util.ArrayList;
        import java.util.List;

        import org.nuxeo.ecm.core.api.DocumentModel;
        import org.nuxeo.ecm.platform.usermanager.UserManager;
        import org.nuxeo.runtime.api.Framework;

        import com.unboundid.scim2.common.types.Email;
        import com.unboundid.scim2.common.types.Group;
        import com.unboundid.scim2.common.types.Name;

        UserManager um = Framework.getService(UserManager.class);
        String userSchemaName = um.getUserSchemaName();
        DocumentModel userModel = nuxeoPrincipal.getModel();

        String firstName = (String) userModel.getProperty(userSchemaName, "firstName");
        String lastName = (String) userModel.getProperty(userSchemaName, "lastName");
        String displayName;
        if (isNotBlank(firstName) && isNotBlank(lastName)) {
            displayName = String.join(" ", firstName, lastName).trim();
        } else if (isNotBlank(firstName)) {
            displayName = firstName.trim();
        } else if (isNotBlank(lastName)) {
            displayName = lastName.trim();
        }
        if (displayName != null) {
            userObject.setDisplayName(displayName);
            Name name = new Name();
            name.setFormatted(displayName);
            if (isNotBlank(firstName)) {
                name.setGivenName(firstName);
            }
            if (isNotBlank(lastName)) {
                name.setFamilyName(lastName);
            }
            userObject.setName(name);
        }

        String email = (String) userModel.getProperty(userSchemaName, "email");
        if (isNotBlank(email)) {
            List<Email> emails = new ArrayList<>();
            emails.add(new Email().setValue(email));
            userObject.setEmails(emails);
        }

        List<Group> groups = new ArrayList<>();
        String userId = (String) userModel.getProperty(userSchemaName, um.getUserIdField());
        List<String> groupIds = um.getPrincipal(userId).getAllGroups();
        if (groupIds != null) {
            for (String groupId : groupIds) {
                Group group = new Group();
                group.setValue(groupId);
                groups.add(group);
            }
        }
        userObject.setGroups(groups);

        userObject.setActive(true);
	]]>
      </wrapperScript>

    </mapper>


  </extension>

</component>
